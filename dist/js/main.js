!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.zoom=e()}(this,function(){"use strict";function t(t,e){var n=t.style;return Object.keys(e).forEach(function(t){n[t]=e[t]}),n}function e(t){var e=document.createElement("div");e.innerHTML=t;var n=[],i=!0,s=!1,o=void 0;try{for(var r,a=e.childNodes[Symbol.iterator]();!(i=(r=a.next()).done);i=!0){var l=r.value;1===l.nodeType&&n.push(l)}}catch(t){s=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(s)throw o}}return n.length>1?n:n[0]}function n(t){return Math.min(window.innerHeight/t.height,document.body.offsetWidth/t.width)}var i={defaultSelector:"img[data-action=zoom]"},s=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function e(t){s(this,e),this.event=t,this.init()}return o(e,[{key:"init",value:function(){}},{key:"style",value:function(e){return t(this.event,e),this}},{key:"scale",value:function(){return n(this.event.getBoundingClientRect())}},{key:"offset",value:function(){var t=this.event.getBoundingClientRect();return{y:-(t.width/2-(document.body.scrollWidth/2-t.left)),x:-((t.height-t.height*this.scale())/2+t.top)}}}]),e}(),a={html:'\n        <div class="mask"></div>\n    '},l=function(){function n(t,i){s(this,n),this.options=t,this.instance=i,this.el=e(a.html),this.parent=document.body,this.init()}return o(n,[{key:"init",value:function(){t(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,zindex:233,background:"rgba(255, 255, 255, 0.4)",transition:"0.4s cubic-bezier(0.4, 0, 0, 1)"})}},{key:"insert",value:function(){this.parent.appendChild(this.el)}},{key:"show",value:function(){var t=this;setTimeout(function(){return t.el.style.opacity=1},30)}},{key:"hide",value:function(){this.el.style.opacity=0}},{key:"remove",value:function(){this.parent.removeChild(this.el)}}]),n}();return function(){function t(e){var n=this;s(this,t),this.body=document.body,this.el="string"==typeof e.el?document.querySelector(e.el):e.el,this.imgs=[],this.style={},this.instance={options:{},event:null},this.lock=!1,this.shown=!1,this.Mask=new l,Object.keys(i).forEach(function(t){return n[t]=e[t]||i[t]}),this.init()}return o(t,[{key:"init",value:function(){this.imgs=this.el.querySelectorAll(this.defaultSelector),this.listen(this.imgs)}},{key:"listen",value:function(t){var e=this;return t.forEach(function(t){t.addEventListener("click",e.handleClick.bind(e))}),document.addEventListener("scroll",this.close.bind(this)),this}},{key:"handleClick",value:function(){this.shown?this.close():this.open(event.target)}},{key:"open",value:function(t){var e=this;if(this.lock||this.shown)return this;var n=this.instance.event=new r(t);n.style({position:"relative",transform:"translate3d("+n.offset().y+"px, "+n.offset().x+"px, 0) scale3d("+n.scale()+", "+n.scale()+", 1)",transition:"0.4s cubic-bezier(0.4, 0, 0, 1)",zIndex:2333}),this.lock=!0,this.shown=!0,this.Mask.insert(),this.Mask.show();var i=function t(){n.event.removeEventListener("transitionend",t),e.lock=!1};n.event.addEventListener("transitionend",i)}},{key:"close",value:function(){var t=this;if(this.lock||!this.shown)return this;var e=this.instance.event;this.Mask.hide(),e.style({transform:"translate3d(0, 0, 0) scale3d(1, 1, 1)"}),this.lock=!0,this.shown=!1;var n=function n(){e.event.removeEventListener("transitionend",n),t.lock=!1,t.Mask.remove(),e.style({position:"relative",zIndex:""})};e.event.addEventListener("transitionend",n)}}]),t}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
